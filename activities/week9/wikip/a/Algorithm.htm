<!DOCTYPE html>
<html class="client-nojs" dir="ltr" lang="en">
 <head>
  <title>Algorithm</title>
  <meta charset="UTF-8" />
  
  
  <link href="../../disclaimer.htm" rel="copyright" />
  <link rel="stylesheet" href="../../css/en-shared.css" />
  <!--[if IE 6]><link rel="stylesheet" href="../../css/IE60Fixes.css" media="screen" /><![endif]-->
  <!--[if IE 7]><link rel="stylesheet" href="../../css/IE70Fixes.css" media="screen" /><![endif]-->
  <meta content="" name="ResourceLoaderDynamicStyles" />
  <link rel="stylesheet" href="../../css/en-site-vector.css" />
  <style>a:lang(ar),a:lang(ckb),a:lang(fa),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}.editsection{display:none}
/* cache key: enwiki:resourceloader:filter:minify-css:7:79e96594f03002bbea98f74c22274594 */</style>
  <link href="http://schools-wikipedia.org/wp/a/Algorithm.htm" rel="canonical" />
  <link href="http://www.soschildren.org/wikipedia-for-schools" rel="author" />
  <meta content="Discover more about Algorithm. One of thousands of articles selected and checked for the Wikipedia for Schools by SOS Children's Villages UK" name="description" />
 </head>
 <body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Algorithm skin-monobook action-view">
  <div id="globalWrapper">
   <div id="column-content">
    <div class="mw-body-primary" id="content" role="main"><a id="top"></a><a id="badge" href="../../disclaimer.htm"><img alt="Checked content" src="../../checked-content.png" width="150" height="70" /></a><h1 class="firstHeading" id="firstHeading" lang="en"><span dir="auto">Algorithm</span></h1>
     <div class="mw-body" id="bodyContent">
      <div id="siteSub">Related subjects: <a href="../index/subject.Mathematics.htm">Mathematics</a></div>
      <!-- start content -->
      <div class="mw-content-ltr" dir="ltr" id="mw-content-text" lang="en"><div class="thumb tleft" id="sitebackground"><div style="width:152px;" class="thumbinner"><h4>Background to the schools Wikipedia</h4><p>SOS Children, which runs nearly 200 <a href="../../wp/s/Sos_Schools.htm">sos schools</a> in the developing world, organised this selection. All children available for child sponsorship from SOS Children are looked after in a family home by the charity. <a href="http://www.soschildren.org/sponsor-a-child">Read more...</a></p></div></div>
       <div class="thumb tright">
        <div class="thumbinner" style="width:182px;"><a class="image" href="../../images/117/11771.png.htm"><img alt="" class="thumbimage" height="246" src="../../images/117/11771.png"  width="180" /></a><div class="thumbcaption">
          <div class="magnify"><a class="internal" href="../../images/117/11771.png.htm" title="Enlarge"><img alt="" height="11" src="../../images/1x1white.gif" title="This image is not present because of licensing restrictions" width="15" /></a></div><!--del_lnk--> Flowcharts are often used to graphically represent algorithms.</div>
        </div>
       </div>
       <p>In <a href="../../wp/m/Mathematics.htm" title="Mathematics">mathematics</a>, <!--del_lnk--> computing, <a href="../../wp/l/Linguistics.htm" title="Linguistics">linguistics</a> and related disciplines, an <b>algorithm</b> is a type of <!--del_lnk--> effective method in which a definite list of well-defined instructions for completing a task, when given an initial state, will proceed through a well-defined series of successive states, eventually terminating in an end-state. The transition from one state to the next is not necessarily <!--del_lnk--> deterministic; some algorithms, known as <!--del_lnk--> probabilistic algorithms, incorporate randomness.</p>
       <p>The concept of an algorithm originated as a means of recording procedures for solving mathematical problems such as finding the common <a href="../../wp/d/Divisor.htm" title="Divisor">divisor</a> of two numbers or multiplying two numbers; such algorithms were in use by the <a href="../../wp/b/Babylonia.htm" title="Babylonia">Babylonians</a> as early as <!--del_lnk--> 1600 BC.</p>
       <p>A partial formalization of the concept began with attempts to solve the <!--del_lnk--> Entscheidungsproblem (the "decision problem") that <a href="../../wp/d/David_Hilbert.htm" title="David Hilbert">David Hilbert</a> posed in 1928. Subsequent formalizations were framed as attempts to define "<!--del_lnk--> effective calculability"(Kleene 1943:274) or "effective method" (Rosser 1939:225); those formalizations included the G&ouml;del-Herbrand-Kleene <!--del_lnk--> recursive functions of 1930, 1934 and 1935, <!--del_lnk--> Alonzo Church's <!--del_lnk--> lambda calculus of 1936, <!--del_lnk--> Emil Post's "Formulation I" of 1936, and <a href="../../wp/a/Alan_Turing.htm" title="Alan Turing">Alan Turing</a>'s <!--del_lnk--> Turing machines of 1936-7 and 1939.</p>
       <h2><span class="mw-headline" id="Etymology">Etymology</span></h2>
       <p><a class="mw-redirect" href="../../wp/m/Mu%25E1%25B8%25A5ammad_ibn_M%25C5%25ABs%25C4%2581_al-Khw%25C4%2581rizm%25C4%25AB.htm" title="Muhammad ibn M&#x16B;s&#x101; al-Khw&#x101;rizm&#x12B;">Al-Khw&#x101;rizm&#x12B;</a>, <a class="mw-redirect" href="../../wp/h/History_of_Iran.htm" title="Persian Empire">Persian</a> <!--del_lnk--> astronomer and <a href="../../wp/m/Mathematician.htm" title="Mathematician">mathematician</a>, wrote a <!--del_lnk--> treatise in <a class="mw-redirect" href="../../wp/a/Arabic_language.htm" title="Arabic">Arabic</a> in 825 AD, <i>On Calculation with Hindu Numerals</i>. (See <!--del_lnk--> algorism). It was translated into <a href="../../wp/l/Latin.htm" title="Latin">Latin</a> in the 12th century as <i>Algoritmi de numero Indorum</i> (al-Daffa 1977), which title was likely intended to mean "[Book by] Algoritmus on the numbers of the Indians", where "Algoritmi" was the translator's rendition of the author's name in the genitive case; but people misunderstanding the title treated <i>Algoritmi</i> as a Latin plural and this led to the word "algorithm" (Latin <i>algorismus</i>) coming to mean "calculation method". The intrusive "th" is most likely due to a <!--del_lnk--> false cognate with the <a href="../../wp/g/Greek_language.htm" title="Greek language">Greek</a> &alpha;&rho;&iota;&theta;&mu;&omicron;&sigmaf; (<i>arithmos</i>) meaning "number".</p>
       <h2><span class="mw-headline" id="Why_algorithms_are_necessary:_an_informal_definition">Why algorithms are necessary: an informal definition</span></h2>
       <p>No generally accepted <i>formal</i> definition of "algorithm" exists yet. We can, however, derive clues to the issues involved and an informal meaning of the word from the following quotation from Boolos &amp; Jeffrey (1974, 1999) (boldface added):</p>
       <blockquote>
        <p>No human being can write fast enough, or long enough, or small enough to list all members of an enumerably infinite set by writing out their names, one after another, in some notation. But humans can do something equally useful, in the case of certain enumerably infinite sets: They can give <b>explicit instructions for determining the nth member of the set</b>, for arbitrary finite n. Such instructions are to be given quite explicitly, in a form in which <b>they could be followed by a computing machine</b>, or by a <b>human who is capable of carrying out only very elementary operations on symbols</b> (Boolos &amp; Jeffrey 1974, 1999, p.&nbsp;19)</p>
       </blockquote>
       <p>The words "enumerably infinite" mean "countable using integers perhaps extending to infinity". Thus Boolos and Jeffrey are saying that an algorithm <i>implies</i> instructions for a process that "creates" output integers from an <i>arbitrary</i> "input" integer or integers that, in theory, can be chosen from 0 to infinity. Thus we might expect an algorithm to be an algebraic equation such as <b>y = m + n</b> &mdash; two arbitrary "input variables" <b>m</b> and <b>n</b> that produce an output <b>y</b>. As we see in <!--del_lnk--> Algorithm characterizations &mdash; the word algorithm implies much more than this, something on the order of (for our addition example):</p>
       <dl>
        <dd>Precise instructions (in language understood by "the computer") for a "fast, efficient, good" <i>process</i> that specifies the "moves" of "the computer" (machine or human, equipped with the necessary internally-contained information and capabilities) to find, decode, and then munch arbitrary input integers/symbols <b>m</b> and <b>n</b>, symbols <b>+</b> and <b>=</b> ... and (reliably, correctly, "effectively") produce, in a "reasonable" <a href="../../wp/t/Time.htm" title="Time">time</a>, output-integer <b>y</b> at a specified place and in a specified format.</dd>
       </dl>
       <p>The concept of <i>algorithm</i> is also used to define the notion of <!--del_lnk--> decidability (logic). That notion is central for explaining how <!--del_lnk--> formal systems come into being starting from a small set of <!--del_lnk--> axioms and rules. In <a href="../../wp/l/Logic.htm" title="Logic">logic</a>, the time that an algorithm requires to complete cannot be measured, as it is not apparently related with our customary physical dimension. From such uncertainties, that characterize ongoing work, stems the unavailability of a definition of <i>algorithm</i> that suits both concrete (in some sense) and abstract usage of the term.</p>
       <dl>
        <dd><i>For a detailed presentation of the various points of view around the definition of "algorithm" see <!--del_lnk--> Algorithm characterizations. For examples of simple addition algorithms specified in the detailed manner described in <!--del_lnk--> Algorithm characterizations, see <!--del_lnk--> Algorithm examples.</i></dd>
       </dl>
       <h2><span class="mw-headline" id="Formalization_of_algorithms">Formalization of algorithms</span></h2>
       <p>Algorithms are essential to the way <a href="../../wp/c/Computer.htm" title="Computer">computers</a> process information, because a <!--del_lnk--> computer program is essentially an algorithm that tells the computer what specific steps to perform (in what specific order) in order to carry out a specified task, such as calculating employees&rsquo; paychecks or printing students&rsquo; report cards. Thus, an algorithm can be considered to be any sequence of operations that can be performed by a <!--del_lnk--> Turing-complete system. Authors who assert this thesis include Savage (1987) and Gurevich (2000):</p>
       <blockquote>
        <p>...Turing's informal argument in favour of his thesis justifies a stronger thesis: every algorithm can be simulated by a Turing machine (Gurevich 2000:1)...according to Savage [1987], an algorithm is a computational process defined by a Turing machine. (Gurevich 2000:3)</p>
       </blockquote>
       <p>Typically, when an algorithm is associated with processing information, data are read from an input source or device, written to an output sink or device, and/or stored for further processing. Stored data are regarded as part of the internal state of the entity performing the algorithm. In practice, the state is stored in a <!--del_lnk--> data structure, but an algorithm requires the internal data only for specific operation sets called <!--del_lnk--> abstract data types.</p>
       <p>For any such computational process, the algorithm must be rigorously defined: specified in the way it applies in all possible circumstances that could arise. That is, any conditional steps must be systematically dealt with, case-by-case; the criteria for each case must be clear (and computable).</p>
       <p>Because an algorithm is a precise list of precise steps, the order of computation will almost always be critical to the functioning of the algorithm. Instructions are usually assumed to be listed explicitly, and are described as starting "from the top" and going "down to the bottom", an idea that is described more formally by <i><!--del_lnk--> flow of control</i>.</p>
       <p>So far, this discussion of the formalization of an algorithm has assumed the premises of <!--del_lnk--> imperative programming. This is the most common conception, and it attempts to describe a task in discrete, "mechanical" means. Unique to this conception of formalized algorithms is the <!--del_lnk--> assignment operation, setting the value of a variable. It derives from the intuition of "<a href="../../wp/m/Memory.htm" title="Memory">memory</a>" as a scratchpad. There is an example below of such an assignment.</p>
       <p>For some alternate conceptions of what constitutes an algorithm see <!--del_lnk--> functional programming and <!--del_lnk--> logic programming .</p>
       <h3><span class="mw-headline" id="Termination">Termination</span></h3>
       <p>Some writers restrict the definition of <i>algorithm</i> to procedures that eventually finish. In such a category Kleene places the "<i>decision procedure</i> or <i>decision method</i> or <i>algorithm</i> for the question" (Kleene 1952:136). Others, including Kleene, include procedures that could run forever without stopping; such a procedure has been called a "computational method" (Knuth 1997:5) or "<i>calculation procedure</i> or <i>algorithm</i>" (Kleene 1952:137); however, Kleene notes that such a method must eventually exhibit "some object" (Kleene 1952:137).</p>
       <p>Minsky makes the pertinent observation, in regards to determining whether an algorithm will eventually terminate (from a particular starting state):</p>
       <blockquote>
        <p>But if the length of the process is not known in advance, then 'trying' it may not be decisive, because if the process does go on forever &mdash; then at no time will we ever be sure of the answer (Minsky 1967:105).</p>
       </blockquote>
       <p>As it happens, no other method can do any better, as was shown by <a href="../../wp/a/Alan_Turing.htm" title="Alan Turing">Alan Turing</a> with his celebrated result on the undecidability of the so-called <!--del_lnk--> halting problem. There is no algorithmic procedure for determining of arbitrary algorithms whether or not they terminate from given starting states. The analysis of algorithms for their likelihood of termination is called <!--del_lnk--> termination analysis.</p>
       <p>See the examples of (im-)"proper" subtraction at <!--del_lnk--> partial function for more about what can happen when an algorithm fails for certain of its input numbers &mdash; e.g., (i) non-termination, (ii) production of "junk" (output in the wrong format to be considered a number) or no number(s) at all (halt ends the computation with no output), (iii) wrong number(s), or (iv) a combination of these. Kleene proposed that the production of "junk" or failure to produce a number is solved by having the algorithm detect these instances and produce e.g., an error message (he suggested "0"), or preferably, force the algorithm into an endless loop (Kleene 1952:322). Davis does this to his subtraction algorithm &mdash; he fixes his algorithm in a second example so that it is proper subtraction (Davis 1958:12-15). Along with the logical outcomes "true" and "false" Kleene also proposes the use of a third logical symbol "u" &mdash; undecided (Kleene 1952:326) &mdash; thus an algorithm will always produce <i>something</i> when confronted with a "proposition". The problem of wrong answers must be solved with an independent "proof" of the algorithm e.g., using induction:</p>
       <blockquote>
        <p>We normally require auxiliary evidence for this (that the algorithm correctly defines a <!--del_lnk--> mu recursive function), e.g., in the form of an inductive proof that, for each argument value, the computation terminates with a unique value (Minsky 1967:186).</p>
       </blockquote>
       <h3><span class="mw-headline" id="Expressing_algorithms">Expressing algorithms</span></h3>
       <p>Algorithms can be expressed in many kinds of notation, including <!--del_lnk--> natural languages, <!--del_lnk--> pseudocode, <!--del_lnk--> flowcharts, and <a href="../../wp/p/Programming_language.htm" title="Programming language">programming languages</a>. Natural language expressions of algorithms tend to be verbose and ambiguous, and are rarely used for complex or technical algorithms. Pseudocode and flowcharts are structured ways to express algorithms that avoid many of the ambiguities common in natural language statements, while remaining independent of a particular implementation language. Programming languages are primarily intended for expressing algorithms in a form that can be executed by a <a href="../../wp/c/Computer.htm" title="Computer">computer</a>, but are often used as a way to define or document algorithms.</p>
       <p>There is a wide variety of representations possible and one can express a given <!--del_lnk--> Turing machine program as a sequence of machine tables (see more at <!--del_lnk--> finite state machine and <!--del_lnk--> state transition table), as flowcharts (see more at <!--del_lnk--> state diagram), or as a form of rudimentary <!--del_lnk--> machine code or <!--del_lnk--> assembly code called "sets of quadruples" (see more at <!--del_lnk--> Turing machine).</p>
       <p>Sometimes it is helpful in the description of an algorithm to supplement small "flow charts" (state diagrams) with natural-language and/or arithmetic expressions written inside "<!--del_lnk--> block diagrams" to summarize what the "flow charts" are accomplishing.</p>
       <p>Representations of algorithms are generally classed into three accepted levels of Turing machine description (Sipser 2006:157):</p>
       <ul>
        <li><b>1 High-level description</b>:</li>
       </ul>
       <dl>
        <dd>
         <dl>
          <dd>"...prose to describe an algorithm, ignoring the implementation details. At this level we do not need to mention how the machine manages its tape or head"</dd>
         </dl>
        </dd>
       </dl>
       <ul>
        <li><b>2 Implementation description</b>:</li>
       </ul>
       <dl>
        <dd>
         <dl>
          <dd>"...prose used to define the way the Turing machine uses its head and the way that it stores data on its tape. At this level we do not give details of states or transition function"</dd>
         </dl>
        </dd>
       </dl>
       <ul>
        <li><b>3 Formal description</b>:</li>
       </ul>
       <dl>
        <dd>
         <dl>
          <dd>Most detailed, "lowest level", gives the Turing machine's "state table".</dd>
         </dl>
        </dd>
       </dl>
       <h3><span class="mw-headline" id="Implementation">Implementation</span></h3>
       <p>Most algorithms are intended to be implemented as <!--del_lnk--> computer programs. However, algorithms are also implemented by other means, such as in a biological <!--del_lnk--> neural network (for example, the <!--del_lnk--> human brain implementing <a href="../../wp/a/Arithmetic.htm" title="Arithmetic">arithmetic</a> or an insect looking for food), in an <!--del_lnk--> electrical circuit, or in a mechanical device.</p>
       <h2><span class="mw-headline" id="Example">Example</span></h2>
       <p>One of the simplest algorithms is to find the largest number in an (unsorted) list of numbers. The solution necessarily requires looking at every number in the list, but only once at each. From this follows a simple algorithm, which can be stated in a high-level description <a href="../../wp/e/English_language.htm" title="English language">English</a> prose, as:</p>
       <p><b>High-level description:</b></p>
       <ol>
        <li>Assume the first item is largest.</li>
        <li>Look at each of the remaining items in the list and if it is larger than the largest item so far, make a note of it.</li>
        <li>The last noted item is the largest in the list when the process is complete.</li>
       </ol>
       <p><b>(Quasi-)formal description:</b> Written in prose but much closer to the high-level language of a computer program, the following is the more formal coding of the algorithm in <!--del_lnk--> pseudocode or <!--del_lnk--> pidgin code:</p>
       <div style="border:1px solid #cccccc; background-color:#f8f8f8; padding:4px;"><pre>
<b>Algorithm</b> LargestNumber
  Input: A non-empty list of numbers <i>L</i>.
  Output: The <i>largest</i> number in the list <i>L</i>.

  <i>largest</i> &larr; <i>L</i><sub>0</sub>
  <b>for each</b> <i>item</i> <b>in</b> the list <i>L<sub>&ge;1</sub></i>, <b>do</b>
    <b>if</b> the <i>item</i> > <i>largest</i>, <b>then</b>
      <i>largest</i> &larr; the <i>item</i>
  <b>return</b> <i>largest</i>
</pre><ul>
         <li><small>"&larr;" is a shorthand for "changes to". For instance, "<i>largest</i> &larr; <i>item</i>" means that the value of <i>largest</i> changes to the value of <i>item</i>.</small></li>
         <li><small>"<b>return</b>" terminates the algorithm and outputs the value that follows.</small></li>
        </ul>
       </div>
       <p>For a more complex example of an algorithm, see <!--del_lnk--> Euclid's algorithm for the <a href="../../wp/g/Greatest_common_divisor.htm" title="Greatest common divisor">greatest common divisor</a>, one of the earliest algorithms known.</p>
       <h3><span class="mw-headline" id="Algorithm_analysis">Algorithm analysis</span></h3>
       <p>As it happens, it is important to know how much of a particular resource (such as time or storage) is required for a given algorithm. Methods have been developed for the <!--del_lnk--> analysis of algorithms to obtain such quantitative answers; for example, the algorithm above has a time requirement of O(<i>n</i>), using the <!--del_lnk--> big O notation with <i>n</i> as the length of the list. At all times the algorithm only needs to remember two values: the largest number found so far, and its current position in the input list. Therefore it is said to have a space requirement of <i>O(1)</i>, if the space required to store the input numbers is not counted, or O (log <i>n</i>) if it is counted.</p>
       <p>Different algorithms may complete the same task with a different set of instructions in less or more time, space, or effort than others. For example, given two different recipes for making potato salad, one may have <i>peel the potato</i> before <i>boil the potato</i> while the other presents the steps in the reverse order, yet they both call for these steps to be repeated for all potatoes and end when the potato salad is ready to be eaten.</p>
       <p>The <!--del_lnk--> analysis and study of algorithms is a discipline of <a href="../../wp/c/Computer_science.htm" title="Computer science">computer science</a>, and is often practiced abstractly without the use of a specific <a href="../../wp/p/Programming_language.htm" title="Programming language">programming language</a> or implementation. In this sense, algorithm analysis resembles other mathematical disciplines in that it focuses on the underlying properties of the algorithm and not on the specifics of any particular implementation. Usually pseudocode is used for analysis as it is the simplest and most general representation.</p>
       <h2><span class="mw-headline" id="Classes">Classes</span></h2>
       <p>There are various ways to classify algorithms, each with its own merits.</p>
       <h3><span class="mw-headline" id="Classification_by_implementation">Classification by implementation</span></h3>
       <p>One way to classify algorithms is by implementation means.</p>
       <ul>
        <li><b>Recursion</b> or <b>iteration</b>: A <!--del_lnk--> recursive algorithm is one that invokes (makes reference to) itself repeatedly until a certain condition matches, which is a method common to <!--del_lnk--> functional programming. <!--del_lnk--> Iterative algorithms use repetitive constructs like <!--del_lnk--> loops and sometimes additional data structures like <!--del_lnk--> stacks to solve the given problems. Some problems are naturally suited for one implementation or the other. For example, <!--del_lnk--> towers of hanoi is well understood in recursive implementation. Every recursive version has an equivalent (but possibly more or less complex) iterative version, and vice versa.</li>
       </ul>
       <ul>
        <li><b>Logical</b>: An algorithm may be viewed as controlled <!--del_lnk--> logical deduction. This notion may be expressed as: <b>Algorithm = logic + control</b> (Kowalski 1979). The logic component expresses the axioms that may be used in the computation and the control component determines the way in which deduction is applied to the axioms. This is the basis for the <!--del_lnk--> logic programming paradigm. In pure logic programming languages the control component is fixed and algorithms are specified by supplying only the logic component. The appeal of this approach is the elegant <!--del_lnk--> semantics: a change in the axioms has a well defined change in the algorithm.</li>
       </ul>
       <ul>
        <li><b>Serial</b> or <b>parallel</b> or <b>distributed</b>: Algorithms are usually discussed with the assumption that computers execute one instruction of an algorithm at a time. Those computers are sometimes called serial computers. An algorithm designed for such an environment is called a serial algorithm, as opposed to <!--del_lnk--> parallel algorithms or <!--del_lnk--> distributed algorithms. Parallel algorithms take advantage of computer architectures where several processors can work on a problem at the same time, whereas distributed algorithms utilise multiple machines connected with a <!--del_lnk--> network. Parallel or distributed algorithms divide the problem into more symmetrical or asymmetrical subproblems and collect the results back together. The resource consumption in such algorithms is not only processor cycles on each processor but also the communication overhead between the processors. Sorting algorithms can be parallelized efficiently, but their communication overhead is expensive. Iterative algorithms are generally parallelizable. Some problems have no parallel algorithms, and are called inherently serial problems.</li>
       </ul>
       <ul>
        <li><b>Deterministic</b> or <b>non-deterministic</b>: <!--del_lnk--> Deterministic algorithms solve the problem with exact decision at every step of the algorithm whereas <!--del_lnk--> non-deterministic algorithm solve problems via guessing although typical guesses are made more accurate through the use of <!--del_lnk--> heuristics.</li>
       </ul>
       <ul>
        <li><b>Exact</b> or <b>approximate</b>: While many algorithms reach an exact solution, <!--del_lnk--> approximation algorithms seek an approximation that is close to the true solution. Approximation may use either a deterministic or a random strategy. Such algorithms have practical value for many hard problems.</li>
       </ul>
       <h3><span class="mw-headline" id="Classification_by_design_paradigm">Classification by design paradigm</span></h3>
       <p>Another way of classifying algorithms is by their design methodology or paradigm. There is a certain number of paradigms, each different from the other. Furthermore, each of these categories will include many different types of algorithms. Some commonly found paradigms include:</p>
       <ul>
        <li><b>Divide and conquer</b>. A <!--del_lnk--> divide and conquer algorithm repeatedly reduces an instance of a problem to one or more smaller instances of the same problem (usually <!--del_lnk--> recursively), until the instances are small enough to solve easily. One such example of divide and conquer is <!--del_lnk--> merge sorting. Sorting can be done on each segment of data after dividing data into segments and sorting of entire data can be obtained in conquer phase by merging them. A simpler variant of divide and conquer is called <b>decrease and conquer algorithm</b>, that solves an identical subproblem and uses the solution of this subproblem to solve the bigger problem. Divide and conquer divides the problem into multiple subproblems and so conquer stage will be more complex than decrease and conquer algorithms. An example of decrease and conquer algorithm is <!--del_lnk--> binary search algorithm.</li>
        <li><b><!--del_lnk--> Dynamic programming</b>. When a problem shows <!--del_lnk--> optimal substructure, meaning the optimal solution to a problem can be constructed from optimal solutions to subproblems, and <!--del_lnk--> overlapping subproblems, meaning the same subproblems are used to solve many different problem instances, a quicker approach called <i>dynamic programming</i> avoids recomputing solutions that have already been computed. For example, the shortest path to a goal from a vertex in a weighted <!--del_lnk--> graph can be found by using the shortest path to the goal from all adjacent vertices. Dynamic programming and <!--del_lnk--> memoization go together. The main difference between dynamic programming and divide and conquer is that subproblems are more or less independent in divide and conquer, whereas subproblems overlap in dynamic programming. The difference between dynamic programming and straightforward recursion is in caching or memoization of recursive calls. When subproblems are independent and there is no repetition, memoization does not help; hence dynamic programming is not a solution for all complex problems. By using memoization or maintaining a <!--del_lnk--> table of subproblems already solved, dynamic programming reduces the exponential nature of many problems to polynomial complexity.</li>
        <li><b>The greedy method</b>. A <!--del_lnk--> greedy algorithm is similar to a <!--del_lnk--> dynamic programming algorithm, but the difference is that solutions to the subproblems do not have to be known at each stage; instead a "greedy" choice can be made of what looks best for the moment. The greedy method extends the solution with the best possible decision (not all feasible decisions) at an algorithmic stage based on the current local optimum and the best decision (not all possible decisions) made in previous stage. It is not exhaustive, and does not give accurate answer to many problems. But when it works, it will be the fastest method. The most popular greedy algorithm is finding the minimal spanning tree as given by <!--del_lnk--> Kruskal.</li>
        <li><b>Linear programming</b>. When solving a problem using <!--del_lnk--> linear programming, specific <!--del_lnk--> inequalities involving the inputs are found and then an attempt is made to maximize (or minimize) some linear function of the inputs. Many problems (such as the <!--del_lnk--> maximum flow for directed <!--del_lnk--> graphs) can be stated in a linear programming way, and then be solved by a 'generic' algorithm such as the <!--del_lnk--> simplex algorithm. A more complex variant of linear programming is called integer programming, where the solution space is restricted to the <a class="mw-redirect" href="../../wp/i/Integer.htm" title="Integers">integers</a>.</li>
        <li><b><!--del_lnk--> Reduction</b>. This technique involves solving a difficult problem by transforming it into a better known problem for which we have (hopefully) <!--del_lnk--> asymptotically optimal algorithms. The goal is to find a reducing algorithm whose <!--del_lnk--> complexity is not dominated by the resulting reduced algorithm's. For example, one <!--del_lnk--> selection algorithm for finding the median in an unsorted list involves first sorting the list (the expensive portion) and then pulling out the middle element in the sorted list (the cheap portion). This technique is also known as <i>transform and conquer</i>.</li>
        <li><b>Search and enumeration</b>. Many problems (such as playing <a href="../../wp/c/Chess.htm" title="Chess">chess</a>) can be modeled as problems on <!--del_lnk--> graphs. A <!--del_lnk--> graph exploration algorithm specifies rules for moving around a graph and is useful for such problems. This category also includes <!--del_lnk--> search algorithms, <!--del_lnk--> branch and bound enumeration and <!--del_lnk--> backtracking.</li>
        <li><b>The probabilistic and heuristic paradigm</b>. Algorithms belonging to this class fit the definition of an algorithm more loosely.</li>
       </ul>
       <ol>
        <li><!--del_lnk--> Probabilistic algorithms are those that make some choices randomly (or pseudo-randomly); for some problems, it can in fact be proven that the fastest solutions must involve some <!--del_lnk--> randomness.</li>
        <li><!--del_lnk--> Genetic algorithms attempt to find solutions to problems by mimicking biological <a href="../../wp/e/Evolution.htm" title="Evolution">evolutionary</a> processes, with a cycle of random mutations yielding successive generations of "solutions". Thus, they emulate reproduction and "survival of the fittest". In <!--del_lnk--> genetic programming, this approach is extended to algorithms, by regarding the algorithm itself as a "solution" to a problem.</li>
        <li><!--del_lnk--> Heuristic algorithms, whose general purpose is not to find an optimal solution, but an approximate solution where the time or resources are limited. They are not practical to find perfect solutions. An example of this would be <!--del_lnk--> local search, <!--del_lnk--> tabu search, or <!--del_lnk--> simulated annealing algorithms, a class of heuristic probabilistic algorithms that vary the solution of a problem by a random amount. The name "<!--del_lnk--> simulated annealing" alludes to the metallurgic term meaning the heating and cooling of metal to achieve freedom from defects. The purpose of the random variance is to find close to globally optimal solutions rather than simply locally optimal ones, the idea being that the random element will be decreased as the algorithm settles down to a solution.</li>
       </ol>
       <h3><span class="mw-headline" id="Classification_by_field_of_study">Classification by field of study</span></h3>
       <p>Every field of science has its own problems and needs efficient algorithms. Related problems in one field are often studied together. Some example classes are <!--del_lnk--> search algorithms, <!--del_lnk--> sorting algorithms, <!--del_lnk--> merge algorithms, <!--del_lnk--> numerical algorithms, <!--del_lnk--> graph algorithms, <!--del_lnk--> string algorithms, <!--del_lnk--> computational geometric algorithms, <a class="mw-redirect" href="../../wp/c/Combinatorics.htm" title="Combinatorial">combinatorial algorithms</a>, <!--del_lnk--> machine learning, <a href="../../wp/c/Cryptography.htm" title="Cryptography">cryptography</a>, <!--del_lnk--> data compression algorithms and <!--del_lnk--> parsing techniques.</p>
       <p>Fields tend to overlap with each other, and algorithm advances in one field may improve those of other, sometimes completely unrelated, fields. For example, dynamic programming was originally invented for optimization of resource consumption in industry, but is now used in solving a broad range of problems in many fields.</p>
       <h3><span class="mw-headline" id="Classification_by_complexity">Classification by complexity</span></h3>
       <p>Algorithms can be classified by the amount of time they need to complete compared to their input size. There is a wide variety: some algorithms complete in linear time relative to input size, some do so in an exponential amount of time or even worse, and some never halt. Additionally, some problems may have multiple algorithms of differing complexity, while other problems might have no algorithms or no known efficient algorithms. There are also mappings from some problems to other problems. Owing to this, it was found to be more suitable to classify the problems themselves instead of the algorithms into equivalence classes based on the complexity of the best possible algorithms for them.</p>
       <h3><span class="mw-headline" id="Classification_by_computing_power">Classification by computing power</span></h3>
       <p>Another way to classify algorithms is by computing power. This is typically done by considering some collection (class) of algorithms. A <b>recursive class of algorithms</b> is one that includes algorithms for all Turing computable functions. Looking at classes of algorithms allows for the possibility of restricting the available computational resources (time and memory) used in a computation. A <b>subrecursive class of algorithms</b> is one in which not all Turing computable functions can be obtained. For example, the algorithms that run in <!--del_lnk--> polynomial time suffice for many important types of computation but do not exhaust all Turing computable functions. The class algorithms implemented by <!--del_lnk--> primitive recursive functions is another subrecursive class.</p>
       <p>Burgin (2005, p. 24) uses a generalized definition of algorithms that relaxes the common requirement that the output of the algorithm that computes a function must be determined after a finite number of steps. He defines a a <b>super-recursive class of algorithms</b> as "a class of algorithms in which it is possible to compute functions not computable by any Turing machine" (Burgin 2005, p. 107). This is closely related to the study of methods of <!--del_lnk--> hypercomputation.</p>
       <h2><span class="mw-headline" id="Legal_issues">Legal issues</span></h2>
       <p>Algorithms, by themselves, are not usually patentable. In the <a href="../../wp/u/United_States.htm" title="United States">United States</a>, a claim consisting solely of simple manipulations of abstract concepts, numbers, or signals do not constitute "processes" (USPTO 2006) and hence algorithms are not patentable (as in <!--del_lnk--> Gottschalk v. Benson). However, practical applications of algorithms are sometimes patentable. For example, in <!--del_lnk--> Diamond v. Diehr, the application of a simple <!--del_lnk--> feedback algorithm to aid in the curing of <!--del_lnk--> synthetic rubber was deemed patentable. The <!--del_lnk--> patenting of software is highly controversial, and there are highly criticized patents involving algorithms, especially <!--del_lnk--> data compression algorithms, such as <!--del_lnk--> Unisys' <!--del_lnk--> LZW patent.</p>
       <p>Additionally, some cryptographic algorithms have export restrictions (see <!--del_lnk--> export of cryptography).</p>
       <h2><span class="mw-headline" id="History:_Development_of_the_notion_of_.22algorithm.22">History: Development of the notion of "algorithm"</span></h2>
       <h3><span class="mw-headline" id="Origin_of_the_word">Origin of the word</span></h3>
       <p>The word <i>algorithm</i> comes from the name of the 9th century <!--del_lnk--> Persian mathematician <a class="mw-redirect" href="../../wp/m/Mu%25E1%25B8%25A5ammad_ibn_M%25C5%25ABs%25C4%2581_al-Khw%25C4%2581rizm%25C4%25AB.htm" title="Al-Khwarizmi">Abu Abdullah Muhammad ibn Musa al-Khwarizmi</a> whose works introduced Indian numerals and algebraic concepts. He worked in <a href="../../wp/b/Baghdad.htm" title="Baghdad">Baghdad</a> at the time when it was the centre of scientific studies and trade. The word <i><!--del_lnk--> algorism</i> originally referred only to the rules of performing <a href="../../wp/a/Arithmetic.htm" title="Arithmetic">arithmetic</a> using <!--del_lnk--> Arabic numerals but evolved via European Latin translation of al-Khwarizmi's name into <i>algorithm</i> by the 18th century. The word evolved to include all definite procedures for solving problems or performing tasks.</p>
       <h3><span class="mw-headline" id="Discrete_and_distinguishable_symbols">Discrete and distinguishable symbols</span></h3>
       <p><b>Tally-marks</b>: To keep track of their flocks, their sacks of grain and their money the ancients used tallying: accumulating stones or marks scratched on sticks, or making discrete symbols in clay. Through the Babylonian and Egyptian use of marks and symbols, eventually <a href="../../wp/r/Roman_numerals.htm" title="Roman numerals">Roman numerals</a> and the <a href="../../wp/a/Abacus.htm" title="Abacus">abacus</a> evolved (Dilson, p.16&ndash;41). Tally marks appear prominently in <!--del_lnk--> unary numeral system arithmetic used in <!--del_lnk--> Turing machine and <!--del_lnk--> Post-Turing machine computations.</p>
       <h3><span class="mw-headline" id="Manipulation_of_symbols_as_.22place_holders.22_for_numbers:_algebra">Manipulation of symbols as "place holders" for numbers: algebra</span></h3>
       <p>The work of the ancient Greek geometers, Persian mathematician <a class="mw-redirect" href="../../wp/m/Mu%25E1%25B8%25A5ammad_ibn_M%25C5%25ABs%25C4%2581_al-Khw%25C4%2581rizm%25C4%25AB.htm" title="Al-Khwarizmi">Al-Khwarizmi</a> (often considered as the "father of <a href="../../wp/a/Algebra.htm" title="Algebra">algebra</a>"), and Western European mathematicians culminated in <a class="mw-redirect" href="../../wp/g/Gottfried_Wilhelm_Leibniz.htm" title="Leibniz">Leibniz</a>'s notion of the <!--del_lnk--> calculus ratiocinator (ca 1680):</p>
       <dl>
        <dd>"A good century and a half ahead of his time, Leibniz proposed an algebra of logic, an algebra that would specify the rules for manipulating logical concepts in the manner that ordinary algebra specifies the rules for manipulating numbers" (Davis 2000:1)</dd>
       </dl>
       <h3><span class="mw-headline" id="Mechanical_contrivances_with_discrete_states">Mechanical contrivances with discrete states</span></h3>
       <p><b>The clock</b>: Bolter credits the invention of the weight-driven <a href="../../wp/c/Clock.htm" title="Clock">clock</a> as &ldquo;The key invention [of Europe in the Middle Ages]", in particular the <!--del_lnk--> verge escapement< (Bolter 1984:24) that provides us with the tick and tock of a mechanical clock. &ldquo;The accurate automatic machine&rdquo; (Bolter 1984:26) led immediately to "mechanical <!--del_lnk--> automata" beginning in the thirteenth century and finally to &ldquo;computational machines" &ndash; the <!--del_lnk--> difference engine and <!--del_lnk--> analytical engines of <a href="../../wp/c/Charles_Babbage.htm" title="Charles Babbage">Charles Babbage</a> and Countess <!--del_lnk--> Ada Lovelace (Bolter p.33&ndash;34, p.204&ndash;206).</p>
       <p><b>Jacquard loom, Hollerith punch cards, telegraphy and telephony &mdash; the electromechanical relay</b>: Bell and Newell (1971) indicate that the <!--del_lnk--> Jacquard loom (1801), precursor to <!--del_lnk--> Hollerith cards (punch cards, 1887), and &ldquo;telephone switching technologies&rdquo; were the roots of a tree leading to the development of the first computers (Bell and Newell diagram p. 39, cf Davis 2000). By the mid-1800s the <!--del_lnk--> telegraph, the precursor of the telephone, was in use throughout the world, its discrete and distinguishable encoding of letters as &ldquo;dots and dashes&rdquo; a common sound. By the late 1800s the <!--del_lnk--> ticker tape (ca 1870s) was in use, as was the use of <!--del_lnk--> Hollerith cards in the 1890 U.S. census. Then came the <!--del_lnk--> Teletype (ca 1910) with its punched-paper use of <!--del_lnk--> Baudot code on tape.</p>
       <p>Telephone-switching networks of electromechanical <!--del_lnk--> relays (invented 1835) was behind the work of <!--del_lnk--> George Stibitz (1937), the inventor of the digital adding device. As he worked in Bell Laboratories, he observed the &ldquo;burdensome&rsquo; use of mechanical calculators with gears. "He went home one evening in 1937 intending to test his idea.... When the tinkering was over, Stibitz had constructed a binary adding device". (Valley News, p. 13).</p>
       <p>Davis (2000) observes the particular importance of the electromechanical relay (with its two "binary states" <i>open</i> and <i>closed</i>):</p>
       <dl>
        <dd>It was only with the development, beginning in the 1930s, of electromechanical calculators using electrical relays, that machines were built having the scope Babbage had envisioned." (Davis, p. 14).</dd>
       </dl>
       <h3><span class="mw-headline" id="Mathematics_during_the_1800s_up_to_the_mid-1900s">Mathematics during the 1800s up to the mid-1900s</span></h3>
       <p><b>Symbols and rules</b>: In rapid succession the mathematics of <!--del_lnk--> George Boole (1847, 1854), <!--del_lnk--> Gottlob Frege (1879), and <!--del_lnk--> Giuseppe Peano (1888&ndash;1889) reduced arithmetic to a sequence of symbols manipulated by rules. Peano's <i>The principles of arithmetic, presented by a new method</i> (1888) was "the first attempt at an axiomatization of mathematics in a symbolic language" (van Heijenoort:81ff).</p>
       <p>But Heijenoort gives Frege (1879) this kudos: Frege&rsquo;s is "perhaps the most important single work ever written in logic. ... in which we see a " 'formula language', that is a <i>lingua characterica</i>, a language written with special symbols, "for pure thought", that is, free from rhetorical embellishments ... constructed from specific symbols that are manipulated according to definite rules" (van Heijenoort:1). The work of Frege was further simplified and amplified by <!--del_lnk--> Alfred North Whitehead and <a href="../../wp/b/Bertrand_Russell.htm" title="Bertrand Russell">Bertrand Russell</a> in their <!--del_lnk--> Principia Mathematica (1910&ndash;1913).</p>
       <p><b>The paradoxes</b>: At the same time a number of disturbing paradoxes appeared in the literature, in particular the <!--del_lnk--> Burali-Forti paradox (1897), the <!--del_lnk--> Russell paradox (1902&ndash;03), and the <!--del_lnk--> Richard Paradox (Dixon 1906, cf Kleene 1952:36&ndash;40). The resultant considerations led to <!--del_lnk--> Kurt G&ouml;del&rsquo;s paper (1931) &mdash; he specifically cites the paradox of the liar &mdash; that completely reduces rules of <!--del_lnk--> recursion to numbers.</p>
       <p><b>Effective calculability</b>: In an effort to solve the <!--del_lnk--> Entscheidungsproblem defined precisely by Hilbert in 1928, mathematicians first set about to define what was meant by an "effective method" or "effective calculation" or "effective calculability" (i.e., a calculation that would succeed). In rapid succession the following appeared: <!--del_lnk--> Alonzo Church, <!--del_lnk--> Stephen Kleene and <!--del_lnk--> J.B. Rosser's <!--del_lnk--> &lambda;-calculus, (cf footnote in <!--del_lnk--> Alonzo Church 1936a:90, 1936b:110) a finely-honed definition of "general recursion" from the work of G&ouml;del acting on suggestions of <!--del_lnk--> Jacques Herbrand (cf G&ouml;del's Princeton lectures of 1934) and subsequent simplifications by Kleene (1935-6:237ff, 1943:255ff). Church's proof (1936:88ff) that the <!--del_lnk--> Entscheidungsproblem was unsolvable, <!--del_lnk--> Emil Post's definition of effective calculability as a worker mindlessly following a list of instructions to move left or right through a sequence of rooms and while there either mark or erase a paper or observe the paper and make a yes-no decision about the next instruction (cf "Formulation I", Post 1936:289-290). <a href="../../wp/a/Alan_Turing.htm" title="Alan Turing">Alan Turing</a>'s proof of that the Entscheidungsproblem was unsolvable by use of his "a- [automatic-] machine"(Turing 1936-7:116ff) -- in effect almost identical to Post's "formulation", <!--del_lnk--> J. Barkley Rosser's definition of "effective method" in terms of "a machine" (Rosser 1939:226). <!--del_lnk--> S. C. Kleene's proposal of a precursor to "<!--del_lnk--> Church thesis" that he called "Thesis I" (Kleene 1943:273&ndash;274), and a few years later Kleene's renaming his Thesis "Church's Thesis" (Kleene 1952:300, 317) and proposing "Turing's Thesis" (Kleene 1952:376).</p>
       <h3><span class="mw-headline" id="Emil_Post_.281936.29_and_Alan_Turing_.281936-7.2C_1939.29">Emil Post (1936) and Alan Turing (1936-7, 1939)</span></h3>
       <p>Here is a remarkable coincidence of two men not knowing each other but describing a process of men-as-computers working on computations &mdash; and they yield virtually identical definitions.</p>
       <p><!--del_lnk--> Emil Post (1936) described the actions of a "computer" (human being) as follows:</p>
       <dl>
        <dd>"...two concepts are involved: that of a <i>symbol space</i> in which the work leading from problem to answer is to be carried out, and a fixed unalterable <i>set of directions</i>.</dd>
       </dl>
       <p>His symbol space would be</p>
       <dl>
        <dd>"a two way infinite sequence of spaces or boxes... The problem solver or worker is to move and work in this symbol space, being capable of being in, and operating in but one box at a time.... a box is to admit of but two possible conditions, i.e., being empty or unmarked, and having a single mark in it, say a vertical stroke.</dd>
       </dl>
       <dl>
        <dd>"One box is to be singled out and called the starting point. ...a specific problem is to be given in symbolic form by a finite number of boxes [i.e., INPUT] being marked with a stroke. Likewise the answer [i.e., OUTPUT] is to be given in symbolic form by such a configuration of marked boxes....</dd>
       </dl>
       <dl>
        <dd>"A set of directions applicable to a general problem sets up a deterministic process when applied to each specific problem. This process will terminate only when it comes to the direction of type (C ) [i.e., STOP]." (U p. 289&ndash;290) See more at <!--del_lnk--> Post-Turing machine</dd>
       </dl>
       <p><a href="../../wp/a/Alan_Turing.htm" title="Alan Turing">Alan Turing</a>&rsquo;s work (1936, 1939:160) preceded that of Stibitz (1937); it is unknown whether Stibitz knew of the work of Turing. Turing&rsquo;s biographer believed that Turing&rsquo;s use of a typewriter-like model derived from a youthful interest: &ldquo;Alan had dreamt of inventing typewriters as a boy; Mrs. Turing had a typewriter; and he could well have begun by asking himself what was meant by calling a typewriter 'mechanical'" (Hodges, p. 96). Given the prevalence of Morse code and telegraphy, ticker tape machines, and Teletypes we might conjecture that all were influences.</p>
       <p>Turing &mdash; his model of computation is now called a <!--del_lnk--> Turing machine &mdash; begins, as did Post, with an analysis of a human computer that he whittles down to a simple set of basic motions and "states of mind". But he continues a step further and creates a machine as a model of computation of numbers (Turing 1936-7:116).</p>
       <dl>
        <dd>"Computing is normally done by writing certain symbols on paper. We may suppose this paper is divided into squares like a child's arithmetic book....I assume then that the computation is carried out on one-dimensional paper, i.e., on a tape divided into squares. I shall also suppose that the number of symbols which may be printed is finite....</dd>
       </dl>
       <dl>
        <dd>"The behaviour of the computer at any moment is determined by the symbols which he is observing, and his "state of mind" at that moment. We may suppose that there is a bound B to the number of symbols or squares which the computer can observe at one moment. If he wishes to observe more, he must use successive observations. We will also suppose that the number of states of mind which need be taken into account is finite...</dd>
       </dl>
       <dl>
        <dd>"Let us imagine that the operations performed by the computer to be split up into 'simple operations' which are so elementary that it is not easy to imagine them further divided" (Turing 1936-7:136).</dd>
       </dl>
       <p>Turing's reduction yields the following:</p>
       <dl>
        <dd>"The simple operations must therefore include: <dl>
          <dd>"(a) Changes of the symbol on one of the observed squares</dd>
          <dd>"(b) Changes of one of the squares observed to another square within L squares of one of the previously observed squares.</dd>
         </dl>
        </dd>
       </dl>
       <p>"It may be that some of these change necessarily invoke a change of state of mind. The most general single operation must therefore be taken to be one of the following:</p>
       <dl>
        <dd>
         <dl>
          <dd>"(A) A possible change (a) of symbol together with a possible change of state of mind.</dd>
          <dd>"(B) A possible change (b) of observed squares, together with a possible change of state of mind"</dd>
         </dl>
        </dd>
       </dl>
       <dl>
        <dd>"We may now construct a machine to do the work of this computer." (Turing 1936-7:136)</dd>
       </dl>
       <p>A few years later, Turing expanded his analysis (thesis, definition) with this forceful expression of it:</p>
       <dl>
        <dd>"A function is said to be "effectivey calculable" if its values can be found by some purely mechanical process. Although it is fairly easy to get an intuitive grasp of this idea, it is neverthessless desirable to have some more definite, mathematical expressible definition . . . [he discusses the history of the definition pretty much as presented above with respect to G&ouml;del, Herbrand, Kleene, Church, Turing and Post] . . . We may take this statement literally, understanding by a purely mechanical process one which could be carried out by a machine. It is possible to give a mathematical description, in a certain normal form, of the structures of these machines. The development of these ideas leads to the author's definition of a computable function, and to an identification of computability &dagger; with effective calculability . . . . <dl>
          <dd>"&dagger; We shall use the expression "computable function" to mean a function calculable by a machine, and we let "effectively calculabile" refer to the intuitive idea without particular identification with any one of these definitions."(Turing 1939:160)</dd>
         </dl>
        </dd>
       </dl>
       <h3><span class="mw-headline" id="J._B._Rosser_.281939.29_and_S._C._Kleene_.281943.29">J. B. Rosser (1939) and S. C. Kleene (1943)</span></h3>
       <p><b><!--del_lnk--> J. Barkley Rosser</b> boldly defined an &lsquo;effective [mathematical] method&rsquo; in the following manner (boldface added):</p>
       <dl>
        <dd>"'Effective method' is used here in the rather special sense of a method each step of which is precisely determined and which is certain to produce the answer in a finite number of steps. With this special meaning, three different precise definitions have been given to date. [his footnote #5; see discussion immediately below]. The simplest of these to state (due to Post and Turing) says essentially that <b>an effective method of solving certain sets of problems exists if one can build a machine which will then solve any problem of the set with no human intervention beyond inserting the question and (later) reading the answer</b>. All three definitions are equivalent, so it doesn't matter which one is used. Moreover, the fact that all three are equivalent is a very strong argument for the correctness of any one." (Rosser 1939:225&ndash;6)</dd>
       </dl>
       <p>Rosser's footnote #5 references the work of (1) Church and Kleene and their definition of &lambda;-definability, in particular Church's use of it in his <i>An Unsolvable Problem of Elementary Number Theory</i> (1936); (2) Herbrand and G&ouml;del and their use of recursion in particular G&ouml;del's use in his famous paper <i>On Formally Undecidable Propositions of Principia Mathematica and Related Systems I</i> (1931); and (3) Post (1936) and Turing (1936-7) in their mechanism-models of computation.</p>
       <p><b><!--del_lnk--> Stephen C. Kleene</b> defined as his now-famous "Thesis I" known as "the <!--del_lnk--> Church-Turing Thesis". But he did this in the following context (boldface in original):</p>
       <dl>
        <dd>"12. <b>Algorithmic theories</b>... In setting up a complete algorithmic theory, what we do is to describe a procedure, performable for each set of values of the independent variables, which procedure necessarily terminates and in such manner that from the outcome we can read a definite answer, "yes" or "no," to the question, "is the predicate value true?&rdquo;"(Kleene 1943:273)</dd>
       </dl>
       <h3><span class="mw-headline" id="History_after_1950">History after 1950</span></h3>
       <p>A number of efforts have been directed toward further refinement of the definition of "algorithm", and activity is on-going because of issues surrounding, in particular, <!--del_lnk--> foundations of mathematics (especially the <!--del_lnk--> Church-Turing Thesis) and <a href="../../wp/p/Philosophy_of_mind.htm" title="Philosophy of mind">philosophy of mind</a> (especially arguments around <!--del_lnk--> artificial intelligence). For more, see <!--del_lnk--> Algorithm characterizations.</p>
      </div>
      <div class="printfooter"> Retrieved from "<!--del_lnk--> http://en.wikipedia.org/w/index.php?title=Algorithm&amp;oldid=198653978"</div>
      <!-- end content -->
      <div class="visualClear">
      </div>
     </div>
    </div>
   </div>
   <div id="column-one">
<div id="logo"><a href="../../index.htm"><img src="../../schools-wikipedia-logo.png" alt="Wikipedia for Schools" /></a></div>
<div class="menu">
<p class="sosheading"><a href="../../wp/index/subject.htm">Subjects</a></p>
<p><a href="../../wp/index/subject.Art.htm">Art</a></p>
<p><a href="../../wp/index/subject.Business_Studies.htm">Business Studies</a></p>
<p><a href="../../wp/index/subject.Citizenship.htm">Citizenship</a></p>
<p><a href="../../wp/index/subject.Countries.htm">Countries</a></p>
<p><a href="../../wp/index/subject.Design_and_Technology.htm">Design and Technology</a></p>
<p><a href="../../wp/index/subject.Everyday_life.htm">Everyday life</a></p>
<p><a href="../../wp/index/subject.Geography.htm">Geography</a></p>
<p><a href="../../wp/index/subject.History.htm">History</a></p>
<p><a href="../../wp/index/subject.IT.htm">Information Technology</a></p>
<p><a href="../../wp/index/subject.Language_and_literature.htm">Language and literature</a></p>
<p><a href="../../wp/index/subject.Mathematics.htm">Mathematics</a></p>
<p><a href="../../wp/index/subject.Music.htm">Music</a></p>
<p><a href="../../wp/index/subject.People.htm">People</a></p>
<p><a href="../../wp/index/subject.Portals.htm">Portals</a></p>
<p><a href="../../wp/index/subject.Religion.htm">Religion</a></p>
<p><a href="../../wp/index/subject.Science.htm">Science</a></p>
<p style="margin-top: 10px;" class="sosheading"><a rel="nofollow" href="../../wp/index/alpha.htm">Title Word Index</a></p>
</div>
</div>

   <div class="visualClear">
   </div>
   <div id="sosebar">
    <div class="center"> Wikipedia for Schools is a selection taken from the original English-language Wikipedia by the child sponsorship charity <a rel="author" href="../../wp/s/Soschildrensvillages.htm">SOS Children</a>. It was created as a <a href="../../wp/w/Wikipedia_For_Schools.htm">checked and child-friendly teaching resource</a> for use in schools in the developing world and beyond.Sources and authors can be found at www.wikipedia.org. See also our <a href="../../disclaimer.htm"><strong>Disclaimer</strong></a>. These articles are available under the <a href="../../wp/w/Wikipedia%253AText_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License.htm"> Creative Commons Attribution Share-Alike Version 3.0 Unported Licence</a>. This article was sourced from http://en.wikipedia.org/?oldid=198653978 . </div>
   </div>
  </div>
 </body>
</html>